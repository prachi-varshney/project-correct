// Check if image deletion was requested
$imgDel = isset($_POST['imgDel']) ? $_POST['imgDel'] : false;
if ($imgDel && $current_image) {
    // Delete the current image file from the server
    $file_path = "uploads/" . $current_image;
    if (file_exists($file_path)) {
        unlink($file_path); // Delete the file from server
    }
    $image_filename = ""; // Clear the image filename in database or wherever it's stored
}

// Process the rest of your form data as usual



To ensure that the image is properly removed both from the user interface and from the database when deleting it during an update operation, you need to handle the deletion logic effectively. Here’s how you can achieve this:

Modify imageDelete() function in script.js
Firstly, modify your imageDelete() function to handle the removal of the image preview and update the form appropriately. Here’s how you can adjust it:

javascript
Copy code
function imageDelete() {
    $('#profile').val(""); // Clear the file input
    $('#currentImage').attr('src', "").hide(); // Hide the current image preview
    $('#imgName').hide(); // Hide the image name display
    $('#imgDel').hide(); // Hide the delete button for the image

    // Update hidden field for current image (if applicable)
    $('#current_image').val(""); // Assuming this is the hidden input storing current image name
}
Update submit_data.php to Handle Image Deletion
In your PHP script (submit_data.php), ensure that when processing the form submission, you check if the image deletion flag (imgDel) is set and handle it accordingly:

php
Copy code
// Check if image deletion was requested
$imgDel = isset($_POST['imgDel']) ? $_POST['imgDel'] : false;
if ($imgDel && $current_image) {
    // Delete the current image file from the server
    $file_path = "uploads/" . $current_image;
    if (file_exists($file_path)) {
        unlink($file_path); // Delete the file from server
    }
    $image_filename = ""; // Clear the image filename in database or wherever it's stored
}

// Process the rest of your form data as usual
Modify updateRowInTable(data) in script.js
In your updateRowInTable(data) function, ensure that if the image is deleted, you update the table row to reflect this change (show no image or default placeholder):


    Ensure Image Deletion in Database
Make sure that your SQL update statement in submit_data.php correctly updates the database to reflect the removal of the image filename (profile field) when imgDel is set:

if ($imgDel) {
    $sql = 'UPDATE employees SET name=?, password=?, email=?, phone=?, dob=?, address=?, city=?, state=?, pincode=?, country=?, experience=?, salary=?, hobbies=?, gender=?, bio=?, profile=?, otherhobby = ? WHERE id=?';
    $stmt = $conn->prepare($sql);
    $stmt->bind_param('ssssssssissssssssi', $name, $hashed_password, $email, $phone, $dob, $address, $city, $state, $pincode, $country, $experience, $salary, $hobbies, $gender, $bio, '', $otherhobby, $id);
} else {
    $sql = 'UPDATE employees SET name=?, password=?, email=?, phone=?, dob=?, address=?, city=?, state=?, pincode=?, country=?, experience=?, salary=?, hobbies=?, gender=?, bio=?, profile=?, otherhobby = ? WHERE id=?';
    $stmt = $conn->prepare($sql);
    $stmt->bind_param('ssssssssissssssssi', $name, $hashed_password, $email, $phone, $dob, $address, $city, $state, $pincode, $country, $experience, $salary, $hobbies, $gender, $bio, $image_filename, $otherhobby, $id);
}


Conclusion
By implementing these changes, you ensure that when a user deletes an image during an update operation, it is removed from both the user interface (via JavaScript) and from the server (via PHP). This ensures consistency between what is displayed in the table and what is stored in the database. Always handle file deletions with caution to avoid accidental data loss.
